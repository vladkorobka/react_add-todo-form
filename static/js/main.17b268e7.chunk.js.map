{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","api/todos.ts","App.tsx","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","title","completed","userId","usersFromServer","find","userItem","cn","TodoList","todos","map","App","useState","todosFromServer","setTodos","setTitle","isTitleValid","setIsTitleValid","setUser","isUserValid","setIsUserValid","action","method","onSubmit","event","preventDefault","trim","Math","max","item","currentTodos","htmlFor","type","value","onChange","titleValue","target","placeholder","userValue","disabled","ReactDOM","render","document","getElementById"],"mappings":"sNAAe,GACb,CACEA,GAAI,EACJC,KAAM,gBACNC,SAAU,OACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,eACNC,SAAU,YACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,WACVC,MAAO,6BAET,CACEH,GAAI,EACJC,KAAM,mBACNC,SAAU,SACVC,MAAO,4BAET,CACEH,GAAI,EACJC,KAAM,uBACNC,SAAU,mBACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,eACVC,MAAO,0BAET,CACEH,GAAI,EACJC,KAAM,2BACNC,SAAU,gBACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,kBACNC,SAAU,WACVC,MAAO,2BAET,CACEH,GAAI,GACJC,KAAM,qBACNC,SAAU,iBACVC,MAAO,2B,OCrDEC,EAA4B,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAClCJ,EAAgBI,EAAhBJ,KAAME,EAAUE,EAAVF,MAEd,OACE,mBAAGG,UAAU,WAAWC,KAAI,iBAAYJ,GAAxC,SACGF,KCDMO,EAAgC,SAAC,GAAc,IAAZC,EAAW,EAAXA,KAE5CT,EAIES,EAJFT,GACAU,EAGED,EAHFC,MACAC,EAEEF,EAFFE,UACAC,EACEH,EADFG,OAGIP,EAAOQ,EAAgBC,MAAK,SAAAC,GAAQ,OAAIA,EAASf,KAAOY,MAAW,KAEzE,OACE,0BACE,UAASZ,EACTM,UAAWU,IAAG,WAAY,CACxB,sBAAuBL,IAH3B,UAME,oBAAIL,UAAU,kBAAd,SACGI,IAGFL,GAAQ,cAAC,EAAD,CAAUA,KAAMA,QCxBlBY,EAA4B,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAC1C,OACE,yBAASZ,UAAU,WAAnB,SACGY,EAAMC,KAAI,SAACV,GAAD,OAAgB,cAAC,EAAD,CAAUA,KAAMA,GAAWA,EAAKT,UCVlD,G,MAAA,CACb,CACEA,GAAI,EACJU,MAAO,qBACPC,WAAW,EACXC,OAAQ,GAEV,CACEZ,GAAI,GACJU,MAAO,kBACPC,WAAW,EACXC,OAAQ,GAEV,CACEZ,GAAI,EACJU,MAAO,qCACPC,WAAW,EACXC,OAAQ,KCTCQ,EAAM,WACjB,MAA0BC,mBAAiBC,GAA3C,mBAAOJ,EAAP,KAAcK,EAAd,KACA,EAA0BF,mBAAS,IAAnC,mBAAOX,EAAP,KAAcc,EAAd,KACA,EAAwCH,oBAAS,GAAjD,mBAAOI,EAAP,KAAqBC,EAArB,KACA,EAAwBL,mBAAS,KAAjC,mBAAOhB,EAAP,KAAasB,EAAb,KACA,EAAsCN,oBAAS,GAA/C,mBAAOO,EAAP,KAAoBC,EAApB,KAqDA,OACE,sBAAKvB,UAAU,MAAf,UACE,+CAEA,uBAAMwB,OAAO,aAAaC,OAAO,OAAOC,SA/BnB,SAACC,GAGxB,GAFAA,EAAMC,iBAEFxB,EAAMyB,QAAmB,MAAT9B,EAAc,CAChC,IAAMI,EAAO,CACXT,GAAIoC,KAAKC,IAAL,MAAAD,KAAI,YAAQlB,EAAMC,KAAI,SAAAmB,GAAI,OAAIA,EAAKtC,QAAO,EAC9CU,QACAC,WAAW,EACXC,QAASP,GAOX,OAJAkB,GAAS,SAAAgB,GAAY,4BAAQA,GAAR,CAAsB9B,OAjB7Ce,EAAS,IACTG,EAAQ,KACRD,GAAgB,QAChBG,GAAe,GAqBVnB,GAASA,IAAUA,EAAMyB,QAC5BT,GAAgB,GAGL,MAATrB,GACFwB,GAAe,IAQf,UACE,sBAAKvB,UAAU,QAAf,UACE,uBAAOkC,QAAQ,mBAAf,qBACA,uBACExC,GAAG,mBACHyC,KAAK,OACL,UAAQ,aACRC,MAAOhC,EACPiC,SA/DgB,SAACV,GACzB,IAAMW,EAAaX,EAAMY,OAAOH,MAEhClB,EAASoB,GAELA,EAAWT,QACbT,GAAgB,IA0DVoB,YAAY,mBAEZrB,GAAgB,sBAAMnB,UAAU,QAAhB,qCAGpB,sBAAKA,UAAU,QAAf,UACE,uBAAOkC,QAAQ,yBAAf,oBACA,yBACExC,GAAG,yBACH,UAAQ,aACR2C,SAhEe,SAACV,GACxB,IAAMc,EAAYd,EAAMY,OAAOH,MAE/Bf,EAAQoB,GACRlB,GAAe,IA6DPa,MAAOrC,EAJT,UAME,wBAAQqC,MAAM,IAAIM,UAAQ,EAA1B,2BACCnC,EAAgBM,KAAI,SAAAJ,GACnB,IAAQf,EAAae,EAAbf,GAAIC,EAASc,EAATd,KAEZ,OACE,wBAAiByC,MAAO1C,EAAxB,SAA6BC,GAAhBD,UAKjB4B,GAAe,sBAAMtB,UAAU,QAAhB,qCAGnB,wBAAQmC,KAAK,SAAS,UAAQ,eAA9B,oBAKF,cAAC,EAAD,CAAUvB,MAAOA,QC3GvB+B,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.17b268e7.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import { User } from '../../types/User';\n\ninterface Props {\n  user: User,\n}\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  const { name, email } = user;\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${email}`}>\n      {name}\n    </a>\n  );\n};\n","import cn from 'classnames';\n\nimport usersFromServer from '../../api/users';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types/Todo';\n\ninterface TodoProps {\n  todo: Todo,\n}\n\nexport const TodoInfo: React.FC<TodoProps> = ({ todo }) => {\n  const {\n    id,\n    title,\n    completed,\n    userId,\n  } = todo;\n\n  const user = usersFromServer.find(userItem => userItem.id === userId) || null;\n\n  return (\n    <article\n      data-id={id}\n      className={cn('TodoInfo', {\n        'TodoInfo--completed': completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {title}\n      </h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import { Todo } from '../../types/Todo';\nimport { TodoInfo } from '../TodoInfo';\n\ninterface Props {\n  todos: Todo[],\n}\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map((todo: Todo) => <TodoInfo todo={todo} key={todo.id} />)}\n    </section>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { useState } from 'react';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types/Todo';\n\nimport './App.scss';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\n\nexport const App = () => {\n  const [todos, setTodos] = useState<Todo[]>(todosFromServer);\n  const [title, setTitle] = useState('');\n  const [isTitleValid, setIsTitleValid] = useState(true);\n  const [user, setUser] = useState('0');\n  const [isUserValid, setIsUserValid] = useState(true);\n\n  const handleTitleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const titleValue = event.target.value;\n\n    setTitle(titleValue);\n\n    if (titleValue.trim()) {\n      setIsTitleValid(true);\n    }\n  };\n\n  const handleUserChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    const userValue = event.target.value;\n\n    setUser(userValue);\n    setIsUserValid(true);\n  };\n\n  const resetForm = () => {\n    setTitle('');\n    setUser('0');\n    setIsTitleValid(true);\n    setIsUserValid(true);\n  };\n\n  const handleFormSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n\n    if (title.trim() && user !== '0') {\n      const todo = {\n        id: Math.max(...todos.map(item => item.id)) + 1,\n        title,\n        completed: false,\n        userId: +user,\n      };\n\n      setTodos(currentTodos => [...currentTodos, todo]);\n\n      resetForm();\n\n      return;\n    }\n\n    if (!title || title !== title.trim()) {\n      setIsTitleValid(false);\n    }\n\n    if (user === '0') {\n      setIsUserValid(false);\n    }\n  };\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/todos\" method=\"POST\" onSubmit={handleFormSubmit}>\n        <div className=\"field\">\n          <label htmlFor=\"App__form--title\">Title: </label>\n          <input\n            id=\"App__form--title\"\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={title}\n            onChange={handleTitleChange}\n            placeholder=\"Enter a title\"\n          />\n          {!isTitleValid && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"App__form--select-user\">User: </label>\n          <select\n            id=\"App__form--select-user\"\n            data-cy=\"userSelect\"\n            onChange={handleUserChange}\n            value={user}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n            {usersFromServer.map(userItem => {\n              const { id, name } = userItem;\n\n              return (\n                <option key={id} value={id}>{name}</option>\n              );\n            })}\n          </select>\n\n          {!isUserValid && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\">\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}